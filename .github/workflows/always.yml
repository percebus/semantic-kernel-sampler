name: "[C]ontinuous [I]ntegration"

on:
  push:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  REPOSITORY_NAME: ${{ github.event.repository.name }}

  ARCHITECTURE: x64

  # node & npm
  NODE_VERSION: 22

  # python
  PYTHON_VERSION: 3.12.8
  PYRIGHT_PYTHON_FORCE_VERSION: latest

  # .NET
  DOTNET_PROJECT: ./*.sln
  DOTNET_VERSION: 8
  DOTNET_TARGET_FRAMEWORK: net8.0
  DOTNET_CONFIGURATION: Release

  # Java
  JDK_VERSION: 11
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: temurin
  MAVEN_CLI_OPTS: --batch-mode --update-snapshots

  # Dockerfile(s) & docker compose
  DOCKER_BUILDKIT: 1
  DOCKER_TAG_VERSION: latest

jobs:
  node_projects_npm_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      matrix:
        project:
          - mcp-server.examples.quick-start
          - rest-app
          - mcp-server.rest-app.posts

    env:
      WORKSPACE: ./node/${{ matrix.project }}
      NPM_CLI_OPTS: --prefix ./node/${{ matrix.project }}
    name: npm test @ ${{ matrix.project }}
    steps:
      - name: node @ ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: checkout
        uses: actions/checkout@v3
      - name: ls
        run: ls -la ./node/${{ matrix.project }}

      - name: npm run setup:ci
        run: npm run setup:ci --if-present ${{ env.NPM_CLI_OPTS }}
      - name: npm install
        run: npm ci ${{ env.NPM_CLI_OPTS }}
      - name: ls node_modules
        run: ls -la ${{ env.WORKSPACE }}/node_modules

      - name: npm test
        run: npm test ${{ env.NPM_CLI_OPTS }}

  npm_test:
    name: npm test
    runs-on: ubuntu-latest
    needs: node_projects_npm_test
    steps:
      - name: node @ ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: checkout
        uses: actions/checkout@v3
      - name: ls
        run: ls -la

      - name: npm run setup:ci
        run: npm run setup:ci --if-present
      - name: npm install
        run: npm ci
      - name: ls node_modules
        run: ls -la ./node_modules

      - name: npm test
        run: npm test

  python_projects_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      matrix:
        project:
          - semantic-kernel-sampler-py
    name: pypyr ci @ ${{ matrix.project }}
    steps:
      - name: python @ ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          architecture: ${{ env.ARCHITECTURE }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./python/${{ matrix.project }}

      - name: (uv) pip install
        run: bash scripts/install.ba.sh
        working-directory: ./python/${{ matrix.project }}

      - name: pypyr lint
        run: pypyr lint stats=True
        working-directory: ./python/${{ matrix.project }}

      - name: pypyr test
        run: pypyr ci lint=False
        working-directory: ./python/${{ matrix.project }}

  dotnet_build:
    name: dotnet build
    runs-on: ubuntu-latest
    steps:
      - name: .NET @ ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./dotnet

      - name: dotnet restore
        run: dotnet restore ${{ env.DOTNET_PROJECT }}
        working-directory: ./dotnet

      - name: dotnet build
        run: dotnet build ${{ env.DOTNET_PROJECT }} --no-restore --configuration ${{ env.DOTNET_CONFIGURATION }}
        working-directory: ./dotnet

      - name: bin.zip
        uses: actions/upload-artifact@v4
        with:
          name: SemanticKernelSampler.DotNet.WebApp.zip
          path: ./dotnet/WebApp/bin/${{ env.DOTNET_CONFIGURATION }}/${{ env.DOTNET_TARGET_FRAMEWORK }}

  mvn_verify:
    name: mvn verify
    runs-on: ubuntu-latest
    steps:
      - name: JDK @ ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          architecture: ${{ env.ARCHITECTURE }}
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./java

      - name: mvn verify
        run: mvn ${{ env.MAVEN_CLI_OPTS }} verify
        working-directory: ./java

      - name: target.zip
        uses: actions/upload-artifact@v4
        with:
          name: SemanticKernelSampler.Java.WebApp.zip
          path: ./java/target

  docker_compose_build:
    name: docker compose build
    runs-on: ubuntu-latest
    needs:
      - npm_test
      - dotnet_build
      - python_projects_test
      - mvn_verify
    steps:
      - name: python @ ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          architecture: ${{ env.ARCHITECTURE }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: pip upgrade
        run: |
          pip install --upgrade pip
          pip install --upgrade --requirement requirements.upgrade.txt

      - name: gil clone
        run: git clone

      # - name: git clone a2a-inspector
      #   run: git clone https://github.com/a2aproject/a2a-inspector.git ./repositories/a2a-inspector

      - name: docker compose build
        run: docker compose build
