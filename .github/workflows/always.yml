name: Verify
on:
  push:

env:
  REPOSITORY_NAME: ${{ github.event.repository.name }}

  ARCHITECTURE: x64

  # node & npm
  NODE_VERSION: 22

  # python
  PYTHON_VERSION: 3.11.9
  PYRIGHT_PYTHON_FORCE_VERSION: latest

  # .NET
  DOTNET_PROJECT: ./*.sln
  DOTNET_VERSION: 8
  DOTNET_TARGET_FRAMEWORK: net8.0
  DOTNET_CONFIGURATION: Release

  # Java
  JDK_VERSION: 11
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: temurin
  MAVEN_CLI_OPTS: --batch-mode --update-snapshots

  # Dockerfile(s) & docker compose
  DOCKER_BUILDKIT: 1
  DOCKER_TAG_VERSION: latest

jobs:
  npm_test_projects:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      matrix:
        project:
          - rest-app

    env:
      WORKSPACE: ./node/${{ matrix.project }}
      NPM_CLI_OPTS: --prefix ./node/${{ matrix.project }}
    name: npm test ${{ matrix.project }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: ls
        run: ls -la ./node/${{ matrix.project }}

      - name: setup node @ ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: setup
        run: npm run setup:ci --if-present ${{ env.NPM_CLI_OPTS }}
      - name: npm install
        run: npm ci ${{ env.NPM_CLI_OPTS }}
      - name: ls node_modules
        run: ls -la ${{ env.WORKSPACE }}/node_modules

      - name: npm test
        run: npm test ${{ env.NPM_CLI_OPTS }}

  npm_test:
    name: npm test
    runs-on: ubuntu-latest
    needs: npm_test_projects
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: ls
        run: ls -la

      - name: setup node @ ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: setup
        run: npm run setup:ci --if-present
      - name: npm install
        run: npm ci
      - name: ls node_modules
        run: ls -la ./node_modules

      - name: npm test
        run: npm test

  python_test:
    name: python test
    runs-on: ubuntu-latest
    steps:
      - name: setup python @ ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          architecture: ${{ env.ARCHITECTURE }}
          python-version: ${{ env.PYTHON_VERSION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./python

      - name: pip install
        run: bash scripts/pip/install.ba.sh
        working-directory: ./python

      - name: lint
        run: pypyr lint stats=True
        working-directory: ./python

      - name: test
        run: pypyr ci lint=False
        working-directory: ./python

  dotnet_build:
    name: dotnet build
    runs-on: ubuntu-latest
    steps:
      - name: setup .NET @ ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./dotnet

      - name: dotnet restore
        run: dotnet restore ${{ env.DOTNET_PROJECT }}
        working-directory: ./dotnet

      - name: dotnet build
        run: dotnet build ${{ env.DOTNET_PROJECT }} --no-restore --configuration ${{ env.DOTNET_CONFIGURATION }}
        working-directory: ./dotnet

      - name: bin.zip
        uses: actions/upload-artifact@v4
        with:
          name: SemanticKernelSampler.DotNet.WebApp.zip
          path: ./dotnet/WebApp/bin/${{ env.DOTNET_CONFIGURATION }}/${{ env.DOTNET_TARGET_FRAMEWORK }}

  mvn_verify:
    name: java build
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK @ ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          architecture: ${{ env.ARCHITECTURE }}
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: checkout
        uses: actions/checkout@v4

      - name: ls
        run: ls -la
        working-directory: ./java

      - name: mvn verify
        run: mvn ${{ env.MAVEN_CLI_OPTS }} verify
        working-directory: ./java

  # TODO: dockerize
  #
  # docker_compose:
  #   name: docker compose
  #   needs:
  #     - npm_test
  #     - dotnet_build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4

  #     - name: docker compose build
  #       run: docker compose build

  # docker_root_matrix:
  #   name: docker build --target
  #   if: github.ref == 'refs/heads/main'
  #   needs: docker_compose
  #   continue-on-error: true
  #   strategy:
  #     max-parallel: 10
  #     matrix:
  #       DOCKER_TARGET:
  #         - root
  #         #
  #         # These are tested by docker compose
  #         - rest-app
  #         # TODO add each package

  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4

  #     - name: "docker build: ${{ matrix.DOCKER_TARGET }}"
  #       run: |
  #         docker build . \
  #           --target ${{ matrix.DOCKER_TARGET }} \
  #           --tag ${{ env.REPOSITORY_NAME }}.${{ matrix.DOCKER_TARGET }}:${{ env.DOCKER_TAG_VERSION }}
