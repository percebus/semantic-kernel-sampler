"""
This type stub file was generated by pyright.
"""

from typing import Any, Hashable, Mapping, Optional, TypeVar, Union, overload
from hamcrest.core.base_matcher import BaseMatcher
from hamcrest.core.description import Description
from hamcrest.core.matcher import Matcher

__author__ = ...
__copyright__ = ...
__license__ = ...
K = TypeVar("K", bound=Hashable)
V = TypeVar("V")
class IsDictContainingEntries(BaseMatcher[Mapping[K, V]]):
    def __init__(self, value_matchers) -> None:
        ...
    
    def matches(self, item: Mapping[K, V], mismatch_description: Optional[Description] = ...) -> bool:
        ...
    
    def describe_mismatch(self, item: Mapping[K, V], mismatch_description: Description) -> None:
        ...
    
    def describe_keyvalue(self, index: K, value: V, description: Description) -> None:
        """Describes key-value pair at given index."""
        ...
    
    def describe_to(self, description: Description) -> None:
        ...
    


@overload
def has_entries(**keys_valuematchers: Union[Matcher[V], V]) -> Matcher[Mapping[str, V]]:
    ...

@overload
def has_entries(keys_valuematchers: Mapping[K, Union[Matcher[V], V]]) -> Matcher[Mapping[K, V]]:
    ...

@overload
def has_entries(*keys_valuematchers: Any) -> Matcher[Mapping[Any, Any]]:
    ...

def has_entries(*keys_valuematchers, **kv_args): # -> IsDictContainingEntries[Any, Any]:
    """Matches if dictionary contains entries satisfying a dictionary of keys
    and corresponding value matchers.

    :param matcher_dict: A dictionary mapping keys to associated value matchers,
        or to expected values for
        :py:func:`~hamcrest.core.core.isequal.equal_to` matching.

    Note that the keys must be actual keys, not matchers. Any value argument
    that is not a matcher is implicitly wrapped in an
    :py:func:`~hamcrest.core.core.isequal.equal_to` matcher to check for
    equality.

    Examples::

        has_entries({'foo':equal_to(1), 'bar':equal_to(2)})
        has_entries({'foo':1, 'bar':2})

    ``has_entries`` also accepts a list of keyword arguments:

    .. function:: has_entries(keyword1=value_matcher1[, keyword2=value_matcher2[, ...]])

    :param keyword1: A keyword to look up.
    :param valueMatcher1: The matcher to satisfy for the value, or an expected
        value for :py:func:`~hamcrest.core.core.isequal.equal_to` matching.

    Examples::

        has_entries(foo=equal_to(1), bar=equal_to(2))
        has_entries(foo=1, bar=2)

    Finally, ``has_entries`` also accepts a list of alternating keys and their
    value matchers:

    .. function:: has_entries(key1, value_matcher1[, ...])

    :param key1: A key (not a matcher) to look up.
    :param valueMatcher1: The matcher to satisfy for the value, or an expected
        value for :py:func:`~hamcrest.core.core.isequal.equal_to` matching.

    Examples::

        has_entries('foo', equal_to(1), 'bar', equal_to(2))
        has_entries('foo', 1, 'bar', 2)

    """
    ...

