"""
This type stub file was generated by pyright.
"""

import sys
import asyncio
from typing import Awaitable, Optional, Type, TypeVar, Union
from hamcrest.core.base_matcher import BaseMatcher
from hamcrest.core.description import Description
from hamcrest.core.matcher import Matcher

__author__ = ...
__copyright__ = ...
__license__ = ...
T = TypeVar("T")
if sys.version_info > (3, 9):
    FutureT = asyncio.Future[T]
    FutureLike = Union[asyncio.Future[T], Awaitable[T]]
else:
    ...
class FutureRaising(BaseMatcher[asyncio.Future]):
    def __init__(self, expected: Type[Exception], pattern: Optional[str] = ..., matching: Optional[Matcher] = ...) -> None:
        ...
    
    def describe_to(self, description: Description) -> None:
        ...
    
    def describe_mismatch(self, future: asyncio.Future, description: Description) -> None:
        ...
    
    def describe_match(self, future: asyncio.Future, match_description: Description) -> None:
        ...
    


def future_raising(exception: Type[Exception], pattern=..., matching=...) -> Matcher[asyncio.Future]:
    """Matches a future with the expected exception.

    :param exception:  The class of the expected exception
    :param pattern:    Optional regular expression to match exception message.
    :param matching:   Optional Hamcrest matchers to apply to the exception.

    Expects the actual to be an already resolved future. The :py:func:`~hamcrest:core.core.future.resolved` helper can be used to wait for a future to resolve.
    Optional argument pattern should be a string containing a regular expression.  If provided,
    the string representation of the actual exception - e.g. `str(actual)` - must match pattern.

    Examples::

        assert_that(somefuture, future_exception(ValueError))
        assert_that(
            await resolved(async_http_get()),
            future_exception(HTTPError, matching=has_properties(status_code=500)
        )
    """
    ...

async def resolved(obj: FutureLike) -> FutureT:
    """Wait for an async operation to finish and return a resolved future object with the result.

    :param obj: A future like object or an awaitable object.
    """
    ...

