"""
This type stub file was generated by pyright.
"""

from typing import TypeVar, Union
from hamcrest.core.base_matcher import BaseMatcher
from hamcrest.core.description import Description
from hamcrest.core.matcher import Matcher

__author__ = ...
__copyright__ = ...
__license__ = ...
T = TypeVar("T")
class AnyOf(BaseMatcher[T]):
    def __init__(self, *matchers: Matcher[T]) -> None:
        ...
    
    def describe_to(self, description: Description) -> None:
        ...
    


def any_of(*items: Union[Matcher[T], T]) -> Matcher[T]:
    """Matches if any of the given matchers evaluate to ``True``.

    :param matcher1,...:  A comma-separated list of matchers.

    The matchers are evaluated from left to right using short-circuit
    evaluation, so evaluation stops as soon as a matcher returns ``True``.

    Any argument that is not a matcher is implicitly wrapped in an
    :py:func:`~hamcrest.core.core.isequal.equal_to` matcher to check for
    equality.

    """
    ...

