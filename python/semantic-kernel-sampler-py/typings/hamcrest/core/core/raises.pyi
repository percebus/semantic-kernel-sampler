"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Optional, Type
from hamcrest.core.base_matcher import BaseMatcher
from hamcrest.core.description import Description
from hamcrest.core.matcher import Matcher

__author__ = ...
__copyright__ = ...
__license__ = ...
class Raises(BaseMatcher[Callable[..., Any]]):
    def __init__(self, expected: Type[Exception], pattern: Optional[str] = ..., matching: Optional[Matcher] = ...) -> None:
        ...
    
    def describe_to(self, description: Description) -> None:
        ...
    
    def describe_mismatch(self, item, description: Description) -> None:
        ...
    
    def describe_match(self, item, match_description: Description) -> None:
        ...
    


def raises(exception: Type[Exception], pattern=..., matching=...) -> Matcher[Callable[..., Any]]:
    """Matches if the called function raised the expected exception.

    :param exception:  The class of the expected exception
    :param pattern:    Optional regular expression to match exception message.
    :param matching:   Optional Hamcrest matchers to apply to the exception.

    Expects the actual to be wrapped by using :py:func:`~hamcrest.core.core.raises.calling`,
    or a callable taking no arguments.
    Optional argument pattern should be a string containing a regular expression.  If provided,
    the string representation of the actual exception - e.g. `str(actual)` - must match pattern.

    Examples::

        assert_that(calling(int).with_args('q'), raises(TypeError))
        assert_that(calling(parse, broken_input), raises(ValueError))
        assert_that(
            calling(valid_user, bad_json),
            raises(HTTPError, matching=has_properties(status_code=500)
        )
    """
    ...

class DeferredCallable:
    def __init__(self, func: Callable[..., Any]) -> None:
        ...
    
    def __call__(self): # -> None:
        ...
    
    def with_args(self, *args, **kwargs): # -> Self:
        ...
    


def calling(func: Callable[..., Any]) -> DeferredCallable:
    """Wrapper for function call that delays the actual execution so that
    :py:func:`~hamcrest.core.core.raises.raises` matcher can catch any thrown exception.

    :param func: The function or method to be called

    The arguments can be provided with a call to the `with_args` function on the returned
    object::

           calling(my_method).with_args(arguments, and_='keywords')
    """
    ...

