"""
This type stub file was generated by pyright.
"""

from typing import Optional, TypeVar
from hamcrest.core.description import Description
from hamcrest.core.matcher import Matcher

__author__ = ...
__copyright__ = ...
__license__ = ...
T = TypeVar("T")
class BaseMatcher(Matcher[T]):
    """Base class for all :py:class:`~hamcrest.core.matcher.Matcher`
    implementations.

    Most implementations can just implement :py:obj:`_matches`, leaving the
    handling of any mismatch description to the ``matches`` method. But if it
    makes more sense to generate the mismatch description during the matching,
    override :py:meth:`~hamcrest.core.matcher.Matcher.matches` instead.

    """
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        """Returns matcher string representation."""
        ...
    
    def matches(self, item: T, mismatch_description: Optional[Description] = ...) -> bool:
        ...
    
    def describe_mismatch(self, item: T, mismatch_description: Description) -> None:
        ...
    
    def describe_match(self, item: T, match_description: Description) -> None:
        ...
    


